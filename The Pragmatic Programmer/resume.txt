Characteristics of Pragmatic Programmers
    Early adopter/fast aapter
    Inquisitive
    Critical thinker
    Realistic
    Jack of all trades

Tip 1 : Care About your craft
Tip 2 : Think! About your work
Tip 3 : Provide options, don't make lame excuses
Tip 4 : Don't live with broken windows
Tip 5 : Be a Catalyst for change 

Sustantivo
1
a substance that increases the rate of a chemical reaction without itself undergoing 
any permanent chemical change.
The key tools will be new breeds of enzymes - 
protein catalysts that speed up chemical reactions in cells.

Tip 6: Remember the big picture
Tip 7: Make quality a requirement issue
Tip 8: Invest regulary in your knowledge portfolio

Goals 
    learn at least one new language every year 
    read a technical book each quarter (read a book a month )
    read non-technical book too
    take classes 
    participate in local user groups
    experiment with different enviroments 
    stay current (magazines like techcrunch)
    get wired (news groups)

Tip 9: Critically analyze what you read and hear


Communicate! 
list of ideas that are useful
    know what you want to say 
    know your audience
    choose your moment
    choose a style
    make it look good
    involve your audience
    be a listener
    get back to people

wisdom acrostic
                    What do you want them to learn ?
      what is their Interest in what you've got to say? 
                how Sophisticated are they ?
           how much Detail do they want ?
Whom do you want to Own the information
        How can you Motivate them to listen to you?

Tip 10: It's both what you say and the way you say it
Tip 11: DRY --  Don't repeat yourself

every piece of knowledge must have a single, unambigous, authoritative representation whitin a system 


how does duplication arise ?
imposed duplication: developers feel they have no choice -- the enviroment seems to require duplication
inadvertent duplication: developers don't realize that they are duplicating information 
impatient duplication: developers get lazy and duplicate because it seems easier
interdeveloper duplication: multiple people on a team (or on diferent teams) duplicate piece of information 

techniques to avoid imposed duplication
    multiple representation of information

Tip 12: Make it easy to reuse
Tip 13: Eliminate effects between unrelated things 


benefits of orthogonal systems : increase productivity and reduce risk

choose your technologies wisely 
(aparece RMI y CORBA)

coding 
    keep your code decoupled
    avoid global data
    avoid similar functions
testing
documentation

Living with orthogonality
is closely related to the DRY principle introduced on page 27


9 Reversibility


Tip 14: There are no final decisions

flexible architecture 

10 Tracer bullets 

Tip 15: Use tracer bullets to find the target

11 Prototipes and post-it notes

Tip 16: Prototype to learn

How to use prototypes 
when building a prototype, what details can you ignore?

* Correctness : you may be able to use dummy data where appropriate
* Completeness : The prototype may function only in a very limited sense, perhaps with only one preselected piece of input data and one menu item.
* Robustness : Error checking is likely to be incomplete or missing entirely. If you stray from the predefined path, the prototype may crash and burn in a glorious display of pyrothecnics. That's okay.
* Style : it is painful to admit this in print, but prototype code probably doesnt have much in the way to comments or documetnation. you may produce reams of documenetation as a result of your experience with the prototype. but comparatively very little on the prototype system itself

Prototyping Architecture
How [not] to use prototypes
Domain Languages

Tip 17: Program close to the problem Domain
Tip 18: Estimate avoid surprises 
Tip 19: Iterate the Schedule with the Code

Chapter 3. The basic tools
Tip 20: Keep Knowledge in plain text
The Power of text
* Insurance against obsolescence
* Leverage
* Easier testing

Tip 21: Use the power of Command Shells
Tip 22: Use a single Editor Well

Source Code Control

Tip 23: Always Use Source Code Control


Debugging
It is a painful thing 
To look at your own trouble and know
That you yourself and no one else has made it
Sophocles, Ajax

Tip 24: fix the problem, not the blame
Tip 25: Don't panic

We worked on a project where a senior engineer was convinced that the select system call
was broken on Solaris. No amount of persuasion or logic could change his mind (the fact
that every other networking application on the box worked fine was irrelevant). He spent
weeks writing work-arounds, which, for some odd reason, didn't seem to fix the problem.
When finally forced to sit down and read the documentation on select, he discovered the
problem and corrected it in a matter of minutes. We now use the phrase "select is broken"
as a gentle reminder whenever one of us starts blaming the system for a fault that is likely
to be our own.

Tip 26: Select Isn't Broken
Tip 27: Don't assume it, Prove it

Debugging Checklist
Is the problem being reported a direct result of the underlying bug, or merely a
symptom?
Is the bug really in the compiler? Is it in the OS? Or is it in your code?
If you explained this problem in detail to a coworker, what would you say?
If the suspect code passes its unit tests, are the tests complete enough? What
happens if you run the unit test with this data?
Do the conditions that caused this bug exist anywhere else in the system?

Tip 28: Learn a Text Manipulation Language
Tip 29: Write Code That Writes Code

There are two main types of code generators:
* Passive code generators are run once to produce a result. From that point
forward, the result becomes freestanding—it is divorced from the code generator.
The wizards discussed in Evil Wizards, along with some CASE tools, are examples
of passive code generators.

* Active code generators are used each time their results are required. The result is
a throw-away—it can always be reproduced by the code generator. Often, active
code generators read some form of script or control file to produce their results.

Chapter 4 Pragmatic Paranoia

Tip 30
You Can't Write Perfect Software

Design by Contract
Nothing astonishes men so much as common sense and plain dealing

Preconditions. What must be true in order for the routine to be called; the
routine's requirements. A routine should never get called when its preconditions
would be violated. It is the caller's responsibility to pass good data (see the box on
page 115).

Postconditions. What the routine is guaranteed to do; the state of the world
when the routine is done. The fact that the routine has a postcondition implies that
it will conclude: infinite loops aren't allowed.

Class invariants. A class ensures that this condition is always true from the
perspective of a caller. During internal processing of a routine, the invariant may not
hold, but by the time the routine exits and control returns to the caller, the invariant
must be true. (Note that a class cannot give unrestricted write-access to any data
member that participates in the invariant.)

Tip 31
Design with Contracts

Tip 32
Crash Early